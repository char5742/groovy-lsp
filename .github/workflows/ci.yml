name: CI

on:
  push:
  pull_request:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  # コードスタイルチェック
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: 23
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run Spotless check
        run: ./gradlew spotlessCheck --no-daemon

  # 各モジュールを並列でテスト実行
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        module:
          - shared
          - server-launcher
          - lsp-protocol
          - groovy-core
          - jdt-adapter
          - codenarc-lint
          - workspace-index
          - formatting
          # integration-testsとbenchmarksは別ジョブで実行
          # vscode-extensionは別の処理が必要

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: 23
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3


      - name: Run tests for ${{ matrix.module }}
        run: ./gradlew :${{ matrix.module }}:test --no-daemon

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.module }}
          path: packages/${{ matrix.module }}/build/test-results/test/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.module }}
          path: packages/${{ matrix.module }}/build/jacoco/test.exec

  # 統合テストは別ジョブで実行
  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: 23
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build all modules
        run: ./gradlew build -x test --no-daemon

      - name: Run integration tests
        run: ./gradlew :integration-tests:test :integration-tests:jacocoTestReport --no-daemon

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration-tests
          path: packages/integration-tests/build/test-results/test/

      - name: Upload integration coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration-tests
          path: packages/integration-tests/build/jacoco/test.exec

  # カバレッジレポートの集約とoctocov実行
  coverage:
    needs: [test, integration-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: 23
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*

      # カバレッジレポートを正しい場所に配置
      - name: Organize coverage reports
        run: |
          for m in shared server-launcher lsp-protocol groovy-core jdt-adapter \
                  codenarc-lint workspace-index formatting integration-tests; do
            if [ -d "coverage-${m}" ]; then
              mkdir -p "packages/${m}/build/jacoco/"
              cp "coverage-${m}/test.exec" "packages/${m}/build/jacoco/" || true
            fi
          done

      # Gradleのビルドディレクトリ構造を再構築（クラスファイルが必要）
      - name: Build all modules (for coverage aggregation)
        run: ./gradlew classes testClasses -x test --no-daemon

      # 統合カバレッジレポートの生成
      - name: Generate aggregated coverage report
        run: ./gradlew jacocoRootReport -x test --no-daemon

      # octocovでカバレッジレポートを表示
      - name: Generate coverage report with octocov
        uses: k1LoW/octocov-action@v1
        with:
          config: .octocov.yml

  # 最終的なステータスチェック
  check:
    needs: [lint, test, integration-test, coverage]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.integration-test.result }}" != "success" ||
                "${{ needs.coverage.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All jobs completed successfully"
