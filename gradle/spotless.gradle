// Spotless configuration for code formatting and static analysis
apply plugin: 'com.diffplug.spotless'

spotless {
    // Javaファイルのフォーマット設定
    java {
        target '**/*.java'
        targetExclude '**/build/**'

        // Google Java Formatを使用
        googleJavaFormat('1.27.0').aosp().reflowLongStrings().skipJavadocFormatting()

        // インポート順序
        importOrder()

        // 不要なインポートの削除
        removeUnusedImports()

        // 行末のホワイトスペースを削除
        trimTrailingWhitespace()

        // ファイル末尾に改行を追加
        endWithNewline()

        // Licenseヘッダー（必要に応じて追加）
        // licenseHeader '/* Copyright (C) 2024 */'
    }

    // Groovyファイルのフォーマット設定
    groovy {
        target '**/*.groovy'
        targetExclude '**/build/**'

        // インポート順序
        importOrder()

        // 行末のホワイトスペースを削除
        trimTrailingWhitespace()

        // ファイル末尾に改行を追加
        endWithNewline()
    }

    // Gradleファイルのフォーマット設定
    groovyGradle {
        target '**/*.gradle'

        // 行末のホワイトスペースを削除
        trimTrailingWhitespace()

        // ファイル末尾に改行を追加
        endWithNewline()
    }

    // その他のファイル（JSON, XML, YAMLなど）
    format 'misc', {
        target '**/*.json', '**/*.xml', '**/*.yaml', '**/*.yml', '**/*.md'
        targetExclude '**/build/**'

        // 行末のホワイトスペースを削除
        trimTrailingWhitespace()

        // ファイル末尾に改行を追加
        endWithNewline()
    }
}

// Error-proneの警告がないことを確認するカスタムタスク
task checkErrorProneWarnings {
    group = 'verification'
    description = 'Check for Error-prone warnings in the build'

    doLast {
        // ビルド出力からError-prone警告を検出
        def hasWarnings = false
        def warningCount = 0

        // 各サブプロジェクトのコンパイルタスクの出力を確認
        subprojects.each { subproject ->
            subproject.tasks.withType(JavaCompile).each { compileTask ->
                if (compileTask.state.executed && compileTask.state.failure == null) {
                    // コンパイラの標準エラー出力を確認（実際の実装では、ビルドの出力をキャプチャする必要があります）
                    // この実装は簡略化されています
                    logger.info("Checking Error-prone warnings for task: ${compileTask.path}")
                }
            }
        }

        if (hasWarnings) {
            throw new GradleException("Found ${warningCount} Error-prone warnings. Please fix them before pushing.")
        }
    }
}

// Spotlessチェックの前にError-proneの警告チェックを実行
spotlessCheck.dependsOn checkErrorProneWarnings
