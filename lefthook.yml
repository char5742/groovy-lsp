# Lefthook configuration for Git hooks
# https://github.com/evilmartians/lefthook

# 並列実行を有効化
parallel: true

# コミット前のフック
pre-commit:
  parallel: true
  commands:
    # Spotlessによるコードフォーマットチェック
    spotless:
      run: ./gradlew spotlessCheck
      tags: formatting linting
      stage_fixed: true

    # 変更されたモジュールのテスト実行
    test:
      run: |
        changed_modules=$(git diff --cached --name-only | grep -E "^packages/" | cut -d'/' -f2 | sort -u)
        if [ -n "$changed_modules" ]; then
          for module in $changed_modules; do
            echo "Running tests for :$module"
            ./gradlew :$module:test
          done
        fi
      tags: testing

# プッシュ前のフック
pre-push:
  parallel: false
  commands:
    # Spotlessによるコードフォーマットチェック
    spotless:
      run: ./gradlew spotlessCheck
      tags: formatting

    # コンパイルチェックのみ（テストは別途実行）
    compile-check:
      run: |
        echo "Checking compilation..."
        # コンパイルのみ実行（テストをスキップ）
        ./gradlew compileJava compileTestJava compileGroovy compileTestGroovy --parallel
      tags: build quality

    # 変更されたモジュールのテストのみ実行
    test-changed:
      run: |
        echo "Running tests for changed modules..."
        # 変更されたファイルからモジュールを特定
        changed_modules=$(git diff origin/$(git symbolic-ref --short HEAD)...HEAD --name-only | grep -E "^packages/" | cut -d'/' -f2 | sort -u)

        if [ -z "$changed_modules" ]; then
          echo "No module changes detected, skipping tests"
          exit 0
        fi

        for module in $changed_modules; do
          echo "Testing :$module"
          ./gradlew :$module:test || exit 1
        done

        echo "✅ All tests passed!"
      tags: testing

    # カバレッジチェック
    coverage-check:
      run: |
        echo "Checking code coverage..."
        # 変更されたモジュールのカバレッジチェック
        changed_modules=$(git diff origin/$(git symbolic-ref --short HEAD)...HEAD --name-only | grep -E "^packages/" | cut -d'/' -f2 | sort -u)

        if [ -z "$changed_modules" ]; then
          echo "No module changes detected, skipping coverage check"
          exit 0
        fi

        for module in $changed_modules; do
          echo "Checking coverage for :$module"
          ./gradlew :$module:jacocoTestCoverageVerification || {
            echo "❌ Coverage check failed for :$module"
            echo "Coverage must be at least 80% for both line and branch coverage"
            exit 1
          }
        done

        echo "✅ All coverage checks passed!"
      tags: testing coverage

# コミットメッセージのフック
commit-msg:
  commands:
    # Conventional Commitsフォーマットのチェック
    conventional:
      run: ./scripts/check-commit-msg.sh {1}

# カスタムコマンド
commands:
  # コード品質チェック
  quality:
    run: |
      echo "Running quality checks..."
      ./gradlew spotlessCheck
      ./gradlew clean build --no-build-cache 2>&1 | grep -c "警告:" | xargs -I {} test {} -eq 0
    description: Run all quality checks (formatting + warnings)

  # クリーンビルド
  clean-build:
    run: ./gradlew clean build
    description: Clean and build the project

  # 依存関係の更新確認
  deps:
    run: ./gradlew dependencyUpdates
    description: Check for dependency updates

# Skip条件
skip:
  - merge: master
  - merge: main
  - rebase
