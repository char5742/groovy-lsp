# Lefthook configuration for Git hooks
# https://github.com/evilmartians/lefthook

# 並列実行を有効化
parallel: true

# コミット前のフック
pre-commit:
  parallel: true
  commands:
    # Spotlessによるコードフォーマットチェック
    spotless:
      run: ./gradlew spotlessCheck
      tags: formatting linting
      stage_fixed: true

    # 変更されたモジュールのテスト実行
    test:
      run: |
        changed_modules=$(git diff --cached --name-only | grep -E "^packages/" | cut -d'/' -f2 | sort -u)
        if [ -n "$changed_modules" ]; then
          for module in $changed_modules; do
            # スキップするモジュールをcase文で管理
            case "$module" in
              "settings.gradle"|"e2e-tests"|"benchmarks")
                continue
                ;;
              *)
                echo "Running tests for :$module"
                ./gradlew :$module:test
                ;;
            esac
          done
        fi
      tags: testing

# プッシュ前のフック
pre-push:
  parallel: false
  commands:
    # Spotlessによるコードフォーマットチェック
    spotless:
      run: ./gradlew spotlessCheck
      tags: formatting

    # ビルドとテストを一度に実行（Error-prone警告も含む）
    build:
      run: |
        echo "Building and checking for errors..."
        # ビルドとテストを一度に実行（buildにはtestも含まれる）
        ./gradlew build 2>&1 | tee build.log

        # ビルドが失敗した場合は終了
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          rm -f build.log
          exit 1
        fi

        # Error-prone警告をチェック（エラーレベルのもののみ）
        # WildcardImportは警告レベルなので除外
        error_count=$(grep -E "エラー:" build.log | grep -v "WildcardImport" | wc -l || echo "0")

        # クリーンアップ
        rm -f build.log

        if [ "$error_count" -gt 0 ]; then
          echo "❌ Found $error_count compilation errors!"
          echo "Please fix all errors before pushing."
          exit 1
        else
          echo "✅ Build successful!"
        fi
      tags: build testing quality

# コミットメッセージのフック
commit-msg:
  commands:
    # Conventional Commitsフォーマットのチェック
    conventional:
      run: ./scripts/check-commit-msg.sh {1}

# カスタムコマンド
commands:
  # コード品質チェック
  quality:
    run: |
      echo "Running quality checks..."
      ./gradlew spotlessCheck
      ./gradlew clean build --no-build-cache 2>&1 | grep -c "警告:" | xargs -I {} test {} -eq 0
    description: Run all quality checks (formatting + warnings)

  # クリーンビルド
  clean-build:
    run: ./gradlew clean build
    description: Clean and build the project

  # 依存関係の更新確認
  deps:
    run: ./gradlew dependencyUpdates
    description: Check for dependency updates

# Skip条件
skip:
  - merge: master
  - merge: main
  - rebase
