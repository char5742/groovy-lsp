plugins {
    alias(libs.plugins.versions) apply false
    alias(libs.plugins.shadow) apply false
    alias(libs.plugins.errorprone) apply false
    alias(libs.plugins.nullaway) apply false
    alias(libs.plugins.spotless) apply false
}

// Spotless設定をすべてのプロジェクトに適用
apply from: "${rootDir}/gradle/spotless.gradle"

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases/'
        }
        maven {
            url 'https://groovy.jfrog.io/artifactory/libs-release-local'
        }
        maven {
            url 'https://download.eclipse.org/releases/latest/'
        }
        maven {
            url 'https://repo.eclipse.org/content/repositories/groovy-releases/'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(23)
        }

        // JPMS有効化設定
        // 現状では外部ライブラリの制約により、sharedとgroovy-coreのみJPMS対応可能
        def enableJpms = project.name in ['shared', 'groovy-core']

        modularity.inferModulePath = enableJpms

        if (!enableJpms) {
            logger.debug("JPMS disabled for module: ${project.name} (auto-module dependencies)")
        }
    }

    dependencies {
        // Groovy dependencies
        implementation libs.bundles.groovy

        // Logging
        implementation libs.bundles.logging

        // Error Prone and NullAway
        errorprone libs.errorprone.core
        errorprone libs.nullaway

        // Testing
        testImplementation libs.bundles.testing
        testImplementation libs.archunit
        testImplementation libs.jmolecules.integrations.archunit
        testImplementation libs.jmolecules.onion.architecture
        testRuntimeOnly libs.junit.platform.launcher
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }

    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    '**/*Launcher*',
                    '**/*Module*',
                    '**/*Constants*'
                ])
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    // server-launcherとgroovy-coreモジュールは段階的に改善予定
                    minimum = project.name in ['server-launcher', 'groovy-core'] ? 0.0 : 0.80
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                }
            }
            rule {
                limit {
                    // server-launcherとgroovy-coreモジュールは段階的に改善予定
                    minimum = project.name in ['server-launcher', 'groovy-core'] ? 0.0 : 0.80
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                }
            }
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    '**/*Launcher*',
                    '**/*Module*',
                    '**/*Constants*',
                    '**/*Main*',
                    '**/*Test*'
                ])
            }))
        }
    }

    check.dependsOn jacocoTestCoverageVerification

    tasks.withType(JavaCompile) {
        options.errorprone {
            enabled = true
            disableWarningsInGeneratedCode = true

            // NullAway configuration
            check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.groovy.lsp")
            option("NullAway:TreatGeneratedAsUnannotated", "true")
            option("NullAway:ExcludedFieldAnnotations", "org.mockito.Mock,org.mockito.Spy")

            // BadImport: FQDNを短縮するための設定
            check("BadImport", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)

            // WildcardImport: ワイルドカードインポートを禁止
            check("WildcardImport", net.ltgt.gradle.errorprone.CheckSeverity.WARN)
        }

    }
}

// 全体のカバレッジレポートを集約
task jacocoRootReport(type: JacocoReport) {
    description = "Aggregate JaCoCo reports from all subprojects"
    group = "verification"

    dependsOn subprojects.test

    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData).filter { it.exists() }

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}
