plugins {
    alias(libs.plugins.versions) apply false
    alias(libs.plugins.shadow) apply false
    alias(libs.plugins.errorprone) apply false
    alias(libs.plugins.nullaway) apply false
}

allprojects {
    group = 'com.groovy.lsp'
    version = '0.1.0-SNAPSHOT'
    
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases/'
        }
        maven {
            url 'https://groovy.jfrog.io/artifactory/libs-release-local'
        }
        maven {
            url 'https://download.eclipse.org/releases/latest/'
        }
        maven {
            url 'https://repo.eclipse.org/content/repositories/groovy-releases/'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(23)
        }
        
        // 段階的なJPMS有効化設定
        // Phase 1: すべてのモジュールでJPMSを無効化（現在）
        // Phase 2: 外部依存の少ないモジュールで有効化
        // Phase 3: すべてのモジュールで有効化
        def jpmsPhase = project.findProperty('jpms.phase') ?: '1'
        def enableJpms = false
        
        if (jpmsPhase == '2') {
            // Phase 2: 選択的有効化
            enableJpms = project.name in ['shared', 'groovy-core', 'jdt-adapter']
        } else if (jpmsPhase == '3') {
            // Phase 3: 全モジュール有効化
            enableJpms = true
        }
        
        modularity.inferModulePath = enableJpms
        
        if (!enableJpms) {
            logger.info("JPMS disabled for module: ${project.name} (Phase: ${jpmsPhase})")
        }
    }
    
    dependencies {
        // Groovy dependencies
        implementation libs.bundles.groovy
        
        // Logging
        implementation libs.bundles.logging
        
        // Error Prone and NullAway
        errorprone libs.errorprone.core
        errorprone libs.nullaway
        
        // Testing
        testImplementation libs.bundles.testing
        testImplementation libs.archunit
        testImplementation libs.jmolecules.integrations.archunit
        testImplementation libs.jmolecules.onion.architecture
        testRuntimeOnly libs.junit.platform.launcher
    }
    
    test {
        useJUnitPlatform()
    }
    
    tasks.withType(JavaCompile) {
        options.errorprone {
            enabled = true
            disableWarningsInGeneratedCode = true
            
            // NullAway configuration
            check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.groovy.lsp")
            option("NullAway:TreatGeneratedAsUnannotated", "true")
            option("NullAway:ExcludedFieldAnnotations", "org.mockito.Mock,org.mockito.Spy")
        }
    }
    
    tasks.withType(GroovyCompile) {
        options.encoding = 'UTF-8'
        groovyOptions.parameters = true
    }
    
    configurations.all {
        resolutionStrategy {
            // Groovyバージョンの統一
            def groovyVersion = '4.0.25'
            
            // Capability competition resolution
            capabilitiesResolution {
                // Groovy本体の競合解決
                withCapability('org.codehaus.groovy:groovy') {
                    selectHighestVersion()
                }
                withCapability('org.apache.groovy:groovy') {
                    select(candidates.find { it.version == groovyVersion })
                }
                
                // Groovyモジュールの競合解決
                ['groovy-json', 'groovy-xml', 'groovy-nio', 'groovy-templates', 'groovy-sql'].each { module ->
                    withCapability("org.codehaus.groovy:${module}") {
                        selectHighestVersion()
                    }
                    withCapability("org.apache.groovy:${module}") {
                        select(candidates.find { it.version == groovyVersion })
                    }
                }
            }
            
            // 強制的にバージョンを統一
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.codehaus.groovy') {
                    details.useTarget("org.apache.groovy:${details.requested.name}:${groovyVersion}")
                    details.because('Standardizing on Apache Groovy')
                }
            }
            
            // 明示的なバージョン強制
            force "org.apache.groovy:groovy:${groovyVersion}"
            force "org.apache.groovy:groovy-json:${groovyVersion}"
            force "org.apache.groovy:groovy-xml:${groovyVersion}"
            force "org.apache.groovy:groovy-nio:${groovyVersion}"
            force "org.apache.groovy:groovy-templates:${groovyVersion}"
            
            // CodeNarc互換性のためのGroovy-all
            force "org.apache.groovy:groovy-all:${groovyVersion}"
        }
    }
}