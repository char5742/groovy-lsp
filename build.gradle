plugins {
    alias(libs.plugins.versions) apply false
    alias(libs.plugins.shadow) apply false
    alias(libs.plugins.errorprone) apply false
    alias(libs.plugins.nullaway) apply false
    alias(libs.plugins.spotless) apply false
    alias(libs.plugins.jmh) apply false
    alias(libs.plugins.test.logger) apply false
}

// Spotless設定をすべてのプロジェクトに適用
apply from: "${rootDir}/gradle/spotless.gradle"

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://repo.gradle.org/gradle/libs-releases/'
        }
        maven {
            url 'https://groovy.jfrog.io/artifactory/libs-release-local'
        }
        maven {
            url 'https://download.eclipse.org/releases/latest/'
        }
        maven {
            url 'https://repo.eclipse.org/content/repositories/groovy-releases/'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(23)
        }

        // JPMS有効化設定
        // 現状では外部ライブラリの制約により、sharedとgroovy-coreのみJPMS対応可能
        def enableJpms = project.name in ['shared', 'groovy-core']

        modularity.inferModulePath = enableJpms

        if (!enableJpms) {
            logger.debug("JPMS disabled for module: ${project.name} (auto-module dependencies)")
        }
    }

    dependencies {
        // Groovy dependencies
        implementation libs.bundles.groovy

        // Logging
        implementation libs.bundles.logging

        // Error Prone and NullAway
        errorprone libs.errorprone.core
        errorprone libs.nullaway

        // Testing
        testImplementation libs.bundles.testing
        testImplementation libs.archunit
        testImplementation libs.jmolecules.integrations.archunit
        testImplementation libs.jmolecules.onion.architecture
        testRuntimeOnly libs.junit.platform.launcher

        // Test annotations from shared module
        if (project.name != 'shared') {
            testImplementation project(path: ':shared', configuration: 'testOutput')
        }
    }

    test {
        useJUnitPlatform {
            // デフォルトでは単体テストのみ実行
            includeTags 'unit'
            excludeTags 'integration', 'e2e', 'slow'
        }
        finalizedBy jacocoTestReport

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }

        // テスト実行時間の最適化
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        forkEvery = 100
    }

    // 統合テスト用タスク（integration-testsモジュール以外）
    if (project.name != 'integration-tests') {
        task integrationTest(type: Test) {
            useJUnitPlatform {
                includeTags 'integration'
                excludeTags 'unit', 'e2e', 'slow'
            }
            shouldRunAfter test
        }
    }

    // E2Eテスト用タスク
    task e2eTest(type: Test) {
        useJUnitPlatform {
            includeTags 'e2e'
            excludeTags 'unit', 'integration'
        }
        shouldRunAfter test
        if (project.name != 'integration-tests') {
            shouldRunAfter integrationTest
        }
    }

    // パフォーマンステスト用タスク
    task performanceTest(type: Test) {
        useJUnitPlatform {
            includeTags 'performance'
        }
        shouldRunAfter test
    }

    // 遅いテスト用タスク
    task slowTest(type: Test) {
        useJUnitPlatform {
            includeTags 'slow'
        }
        shouldRunAfter test
    }

    // すべてのテストを実行
    task allTests {
        dependsOn test, e2eTest
        if (project.name != 'integration-tests') {
            dependsOn integrationTest
        }
    }

    testlogger {
        theme 'mocha-parallel'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 2000  // 2秒以上を遅いテストとして警告
        showSummary true
        showPassed true
        showSkipped true
        showFailed true
        showStandardStreams false
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams false

        // テスト実行時間でグループ化
        logLevel 'lifecycle'
        showSimpleNames true
    }

    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    '**/*Launcher*',
                    '**/*Module*',
                    '**/*Constants*'
                ])
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    minimum = 0.80
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                }
            }
            rule {
                limit {
                    minimum = 0.80
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                }
            }
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    '**/*Launcher*',
                    '**/*Module*',
                    '**/*Constants*',
                    '**/*Main*',
                    '**/*Test*'
                ])
            }))
        }
    }

    check.dependsOn jacocoTestCoverageVerification

    tasks.withType(JavaCompile) {
        options.errorprone {
            enabled = true
            disableWarningsInGeneratedCode = true

            // NullAway configuration
            check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
            option("NullAway:AnnotatedPackages", "com.groovy.lsp")
            option("NullAway:TreatGeneratedAsUnannotated", "true")
            option("NullAway:ExcludedFieldAnnotations", "org.mockito.Mock,org.mockito.Spy")

            // BadImport: FQDNを短縮するための設定
            check("BadImport", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)

            // WildcardImport: ワイルドカードインポートを禁止
            check("WildcardImport", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
        }

        // Error Proneの警告をエラーとして扱い、ビルドを失敗させる
        options.compilerArgs += ["-Werror"]
    }
}

// 全体のカバレッジレポートを集約
task jacocoRootReport(type: JacocoReport) {
    description = "Aggregate JaCoCo reports from all subprojects"
    group = "verification"

    dependsOn subprojects.test

    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData).filter { it.exists() }

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}
